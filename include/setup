#!/bin/bash

################################################################################

source /etc/freedom-node/include/color

################################################################################

# home directory
HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null)"
# user
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null)"

################################################################################
# model & cpu info
################################################################################

VER_FOUND="$(uname -v)"
REL_FOUND="$(uname -r)"
MOD_FOUND="$(grep "Model" /proc/cpuinfo | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$MOD_FOUND" ]] &>/dev/null; then
  MOD_FOUND="$(grep "vendor_id" /proc/cpuinfo | awk -F: '{ print $2 }' | head -1 | xargs)"
fi

CPU_FOUND="$(grep "model name" /proc/cpuinfo | head -1 | awk -F: '{ print $2 }' | xargs)"

# if zero
if [[ -z "$CPU_FOUND" ]] &>/dev/null; then
  CPU_FOUND="$(lscpu | grep "Model name" | awk -F: '{ print $2 }' | xargs)"
fi

MHZ_FOUND="$(echo "$(lscpu | grep "MHz" | awk -F: '{ print $2 }' | grep -v "%" | head -1 | awk '{ print $1 }')/1000" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }') GHz"

# if zero
if [[ -z "$MHZ_FOUND" ]] &>/dev/null; then
  MHZ_FOUND=""
else
  MHZ_FOUND="${CY}$MHZ_FOUND${N0}"
fi

################################################################################
# system info
################################################################################

BOG_FOUND="$(egrep "bogomips|BogoMIPS" /proc/cpuinfo | awk '{ print $NF }' | head -1)"
COR_FOUND="$(egrep -c "bogomips|BogoMIPS" /proc/cpuinfo)"
MEM_FOUND="$(echo "$(echo "$(grep "MemTotal" /proc/meminfo | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null) MB"
HDD_FOUND="$(df -h --total | tail -1 | xargs | tr -d '-')"
HDD_TOTAL="$(echo "$HDD_FOUND" | awk '{ print $2 }')"
HDD_FREE="$(echo "$HDD_FOUND" | awk '{ print $4 }')"

echo "$MEM_FOUND" >/tmp/mem.tmp

################################################################################
# bogomips
################################################################################

# if found
if [[ -n "$BOG_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: BogoMIPS: ${CY}$BOG_FOUND${N0}\n"
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

################################################################################
# kernal release version
################################################################################

# if found
if [[ -n "$VER_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: $VER_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

# if found
if [[ -n "$REL_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: $REL_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

################################################################################
# model
################################################################################

# if found
if [[ -n "$MOD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: $MOD_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] :: ${GR}Not found${N0}\n"
fi

################################################################################
# cpu
################################################################################

# if found
if [[ -n "$CPU_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: $CPU_FOUND $COR_FOUND Core(s) $MHZ_FOUND\n"
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

################################################################################
# hard drive
################################################################################

# if found
if [[ -n "$HDD_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: Total $HDD_TOTAL Free $HDD_FREE\n"
  # if not enough space
  if [[ "$(echo "$HDD_FREE" | tr -d 'G')" -lt "7" ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] :: Not enough space..\n" && exit
  fi
  # if tiny sd card found
  if [[ "$(echo "$HDD_TOTAL" | tr -d 'G')" -lt "32" ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] :: 32GB SD card recommended.\n" && exit
  fi
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

################################################################################
# missing wallet daemon or client
################################################################################

# if VPS already, skip this
if [[ -d "$HOME_DIR"/freed1 || -d "$HOME_DIR"/trump1 ]] &>/dev/null; then
  echo "[!!] :: This is a VPS Server already with $(pidof freedomcoind 2>/dev/null | wc -w) nodes running.."
  # remove obsolete dash for vps server
  sudo rm /usr/local/bin/dash &>/dev/null

else

  # download wallet
  bash /etc/freedom-node/include/download

  ##############################################################################
  # wallet configuration
  ##############################################################################

  # if missing
  if [[ "$(grep -c "rpcuser=" "$HOME_DIR"/.trumpcoin/trumpcoin.conf)" -eq "0" || ! -f "$HOME_DIR"/.trumpcoin/trumpcoin.conf ]] &>/dev/null; then
    printf '%b' "[${N0}!!${N0}] :: Setup rpcuser and rpcpassword..\n"
    # add random rpc credentials
    echo "
# RPC credentials
rpcuser=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
rpcpassword=$(tr -dc 'a-z' </dev/urandom 2>&1 | head -c 8 2>&1 | rev 2>&1)
rpcallowip=127.0.0.1
rpcbind=127.0.0.1" >>"$HOME_DIR"/.trumpcoin/trumpcoin.conf
  fi

  ##############################################################################
  # dashbord (dash)
  ##############################################################################

  # install dash
  cd || exit && sudo cp freedom-node/dash /usr/local/bin
  sudo chmod +x "$USER_NAME":"$USER_NAME" /usr/local/bin/dash 2>/dev/null
  sudo chown "$USER_NAME":"$USER_NAME" /usr/local/bin/dash 2>/dev/null

  ##############################################################################
  # proxy (tor) configuration
  ##############################################################################

  # if missing
  if [[ "$(grep -c "FreedomCoin-service" /etc/tor/torrc)" -eq "0" ]] &>/dev/null; then
    # update tor configuration
    printf '%b' "[${GR}!!${N0}] :: Updating configuration!\n"
    echo "HiddenServiceDir /var/lib/tor/FreedomCoin-service/
HiddenServicePort 15110 127.0.0.1:15110" | sudo tee -a /etc/tor/torrc >/dev/null
    # update tor configuration
    printf '%b' "[${GR}!!${N0}] :: Restarting tor!\n"
    sudo service tor@default restart
  fi

  ##############################################################################
  # network interface
  ##############################################################################

  # fetch lan from ifconfig
  ifconfig | grep "inet" | egrep -v "prefix|127" | awk '{ print $2 }' >/tmp/lanip.tmp
  printf '%b' "[${G1}OK${N0}] :: ${N0}$(cat /tmp/lanip.tmp 2>/dev/null)${N0}\n"
  # fetch wan from whatismyip
  curl -s http://whatismyip.akamai.com/ >/tmp/wanip.tmp
  printf '%b' "[${G1}OK${N0}] :: ${CY}$(cat /tmp/wanip.tmp 2>/dev/null)${N0}\n"
  # fetch onion from hidden service
  sudo cat /var/lib/tor/FreedomCoin-service/hostname >/etc/freedom-node/hostname.onion
  printf '%b' "[${G1}OK${N0}] :: ${P1}$(cat /etc/freedom-node/hostname.onion 2>/dev/null)${N0}\n"

  ##############################################################################
  # bootstrap
  ##############################################################################

  bash /etc/freedom-node/include/bootstrap

  ##############################################################################
  # freedomcoin daemon service
  ##############################################################################

  if [[ ! -f /etc/systemd/system/freedomcoind.service ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] :: Creating FreedomCoin service..\n"

    echo "[Unit]
Description=freedomcoind service
After=network-online.target

[Service]
Type=simple
User=$USER_NAME
Group=$USER_NAME
ExecStart=/etc/freedom-node/include/start
ExecReload=/etc/freedom-node/include/restart
ExecStop=/usr/local/bin/freedomcoin-cli stop
Restart=always
RestartSec=60

[Install]
WantedBy=multi-user.target" >/tmp/service.tmp
    # install service
    sudo mv /tmp/service.tmp /etc/systemd/system/freedomcoind.service &>/dev/null
    # enable service
    printf '%b' "[${G1}OK${N0}] :: Enabling FreedomCoin service..\n"
    sudo systemctl enable freedomcoind
  fi

  ##############################################################################
  # freedomcoin display service
  ##############################################################################

  if [[ ! -f /etc/systemd/system/freedom-display.service ]] &>/dev/null; then

    cat <<EOF >/tmp/freedom-display.service.tmp
[Unit]
Description=Freedom Node Dashboard
After=multi-user.target
ConditionPathExists=/usr/local/bin/dash

[Service]
ExecStart=/bin/bash -l -c '/usr/local/bin/dash'
StandardOutput=file:/var/log/freedom-display.log
StandardError=file:/var/log/freedom-display.error.log
StandardInput=tty
TTYPath=/dev/tty1
Restart=no
User=$USER_NAME
WorkingDirectory=$HOME_DIR
Environment=TERM=linux

[Install]
WantedBy=multi-user.target
EOF

    # install service
    sudo mv /tmp/freedom-display.service.tmp /etc/systemd/system/freedom-display.service &>/dev/null
    # enable service
    printf '%b' "[${G1}OK${N0}] :: Enabling FreedomCoin display service..\n"
    sudo systemctl enable freedom-display
    # reexec & reload
    sudo systemctl daemon-reexec
    sudo systemctl daemon-reload
    printf '%b' "[${GR}!!${N0}] :: Please reboot..\n"
  fi

  ##############################################################################
  # freedomcoin start
  ##############################################################################

  # daemon running
  if [[ "$(pidof freedomcoind 2>/dev/null | wc -l)" -gt "0" ]] &>/dev/null; then
    printf '%b' "[${G1}OK${N0}] :: Already running! PID: ${G1}$(pidof freedomcoind)${N0}\n"
    printf '%b' "[${G1}OK${N0}] :: Run ${CY}dash${N0} and monitor!\n"
  else
    # start service
    sudo service freedomcoind restart
  fi
fi

# END
