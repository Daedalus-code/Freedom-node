#!/bin/bash

################################################################################

source /etc/freedom-node/include/color
source /etc/freedom-node/include/time_fix

################################################################################

# home directory
HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null)"
# user
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null)"

# if missing
if [[ ! -d "$HOME_DIR"/node/ ]] &>/dev/null; then
  # create directory
  mkdir "$HOME_DIR"/node/ &>/dev/null
  chmod 755 "$HOME_DIR"/node/
fi

################################################################################

# if missing and if any display
if [[ ! -f /tmp/setfont && -f "$HOME_DIR"/node/display ]] &>/dev/null; then
  # set console display font
  sudo setfont /usr/share/consolefonts/Uni2-TerminusBold14.psf.gz 2>/dev/null
  echo "/usr/share/consolefonts/Uni2-TerminusBold14.psf.gz" >/tmp/setfont 2>/dev/null
fi

################################################################################
# logo, tx colors
################################################################################

# default color (idle)
CB="${GR}"
TX="${GR}"
WC="${GR}"

################################################################################
# freedomcoin price
################################################################################

DATE="$(date '+%s')"

# check last price age
PRICE_FILE="$HOME_DIR/node/price.tmp"
# if found
if [ -f "$PRICE_FILE" ]; then
  PRICE_AGE="$(($(echo "$DATE") - $(stat -c '%Y' "$PRICE_FILE" || echo 0)))"
else
  PRICE_AGE="9999" # assume it's too old if the file doesn't exist
fi
# if the file is missing or the data is older than 420 seconds, fetch new price
if [ ! -f "$PRICE_FILE" ] || [ "$PRICE_AGE" -gt "420" ]; then
  CRYPTO="freedomcoin"
  CURRENCY="usd"
  # fetch the latest price from the coingecko api ##############################
  PRICE=$(timeout 10 curl -s "https://api.coingecko.com/api/v3/simple/price?ids=$CRYPTO&vs_currencies=$CURRENCY" | jq -r ".$CRYPTO.$CURRENCY")
  ##############################################################################
  echo "$PRICE" >"$PRICE_FILE"
# read the (possibly updated) cached price
fi
FREED_PRICE="$(cat "$PRICE_FILE" 2>/dev/null)"

################################################################################
# client commands
################################################################################

# client updated data age (seconds)
CLIENT_UPDATED_DATA="$(($(echo "$DATE") - $(stat -c '%Y' "$HOME_DIR"/node/KEK.tmp 2>/dev/null || echo 0)))"

# if older than n, if not syncing
if [[ "$CLIENT_UPDATED_DATA" -gt "55" && ! "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
  # getinfo
  /usr/local/bin/./freedomcoin-cli getinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getinfo.tmp 2>/dev/null
  # getwalletinfo
  /usr/local/bin/freedomcoin-cli getwalletinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null
  # getbestblockhash
  /usr/local/bin/freedomcoin-cli getbestblockhash 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getbestblockhash.tmp 2>/dev/null
  # getmempoolinfo
  /usr/local/bin/freedomcoin-cli getmempoolinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getmempoolinfo.tmp 2>/dev/null
  # getpeerinfo
  /usr/local/bin/freedomcoin-cli getpeerinfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null
  # listunspent
  /usr/local/bin/freedomcoin-cli listunspent 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/listunspent.tmp 2>/dev/null
  # getnodeaddresses
  /usr/local/bin/freedomcoin-cli getnodeaddresses 2>/dev/null | grep -v "Error" | grep "address" | awk '{ print $2 }' | tr -d '",' >>/etc/freedom-node/node.peers 2>/dev/null
  # getpatriotnodecount
  /usr/local/bin/freedomcoin-cli getpatriotnodecount 2>/dev/null | grep -v "Error" | tr -d ',}{"' >"$HOME_DIR"/node/getpatriotnodecount.tmp 2>/dev/null
  # mnsync status
  /usr/local/bin/freedomcoin-cli mnsync status 2>/dev/null | grep -v "Error" | tr -d ',}{"' >"$HOME_DIR"/node/mnsync_status.tmp 2>/dev/null
  # version
  if [[ ! -f "$HOME_DIR"/node/version.tmp || ! -s "$HOME_DIR"/node/version.tmp ]] &>/dev/null; then
    /usr/local/bin/./freedomcoin-cli -version 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/version.tmp 2>/dev/null
  fi
  # getblockchaininfo
  if [[ ! -f "$HOME_DIR"/node/getblockchaininfo.tmp || ! -s "$HOME_DIR"/node/getblockchaininfo.tmp ]] &>/dev/null; then
    /usr/local/bin/freedomcoin-cli getblockchaininfo 2>/dev/null | grep -v "Error" >"$HOME_DIR"/node/getblockchaininfo.tmp 2>/dev/null
  fi
  echo "CHECKED @ $(date | xargs)" >"$HOME_DIR"/node/KEK.tmp
fi

################################################################################
# wallet sync w progress bar
################################################################################

source /etc/freedom-node/include/sync/progress

################################################################################
# repository version
################################################################################

LOC_0="$(wc -l /etc/freedom-node/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_1="$(wc -l /etc/freedom-node/*/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_2="$(wc -l /etc/freedom-node/*/*/* 2>/dev/null | grep "total" | egrep -o "[0-9]+")"
LOC_T="$(echo "$LOC_0+$LOC_1+$LOC_2" | bc 2>/dev/null | sed 's/./&./g;s/\.$//')"

REPO_VERSION="${N0}v$LOC_T"

################################################################################
# date
################################################################################

DATE_CLOCK="$(date '+%D %H:%M:%S' 2>/dev/null)"
SYSTEM_DATE="${GR}$(echo "$DATE_CLOCK" | awk '{ print $1 }')${N0}"
SYSTEM_CLOCK="$(echo "$DATE_CLOCK" | awk '{ print $2 }')"

################################################################################
# wallet movements
################################################################################

# if new addtowallet
if [[ ! "$(grep "AddToWallet" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $3 }' | tail -1)" == "$(tail -1 "$HOME_DIR"/node/movements.tmp)" ]] &>/dev/null; then
  # fetch addtowallet
  grep "AddToWallet" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $3 }' >"$HOME_DIR"/node/movements.tmp
fi

# reset after midnight
if [[ "$(echo "$SYSTEM_CLOCK" | awk -F: '{ print $1":"$2 }')" == "00:00" ]] &>/dev/null; then
  truncate -s 0 "$HOME_DIR"/node/movements.tmp &>/dev/null
fi

WALLET_MOVEMENT="$(wc -l "$HOME_DIR"/node/movements.tmp 2>/dev/null | awk '{ print $1 }')"
WALLET_MOVEMENT_AGE="$(stat -c '%Y' "$HOME_DIR"/node/movements.tmp 2>/dev/null | while read lastedit; do echo "$(($(echo "$DATE") - $lastedit))"; done)"

# if any movements
if [[ "$WALLET_MOVEMENT" -gt "0" && "$WALLET_MOVEMENT_AGE" -lt "2777" ]] &>/dev/null; then
  CB="${G1}"
  TX="${G1}"
  WC="${G1}"
fi

################################################################################
# proof-of-stake count
################################################################################

BLOCK_WAS_SIGNED="$(grep "BitcoinMiner : proof-of-stake block was signed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $NF }' | tail -1)"
PROOF_OF_STAKE="$(tail -1 "$HOME_DIR"/node/stakes.tmp)"

# if any data
if [[ -n "$BLOCK_WAS_SIGNED" && -n "$PROOF_OF_STAKE" ]] &>/dev/null; then
  # if new signed block
  if [[ ! "$BLOCK_WAS_SIGNED" == "$PROOF_OF_STAKE" ]] &>/dev/null; then
    # fetch signed proof-of-stake block
    grep "BitcoinMiner : proof-of-stake block was signed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $NF }' >>"$HOME_DIR"/node/stakes.tmp
    # remove duplicates
    echo "$(awk '!a[$0]++' "$HOME_DIR"/node/stakes.tmp 2>/dev/null)" >"$HOME_DIR"/node/stakes.tmp
  fi
fi

# reset after midnight
if [[ "$(echo "$SYSTEM_CLOCK" | awk -F: '{ print $1":"$2 }')" == "00:00" ]] &>/dev/null; then
  truncate -s 0 "$HOME_DIR"/node/stakes.tmp &>/dev/null
fi

# default
WALLET_POS_REWARDS="$(wc -l "$HOME_DIR"/node/stakes.tmp 2>/dev/null | awk '{ print $1 }')"

# if zero
if [[ -z "$WALLET_POS_REWARDS" ]] &>/dev/null; then
  WALLET_POS_REWARDS="0"
fi

# wallet pos rewards age (seconds)
WALLET_POS_REWARDS_AGE="$(stat -c '%Y' "$HOME_DIR"/node/stakes.tmp 2>/dev/null | while read lastedit; do echo "$(($(echo "$DATE") - $lastedit))"; done)"

# if any rewards and less than n age
if [[ "$WALLET_POS_REWARDS" -gt "0" && "$WALLET_POS_REWARDS_AGE" -lt "2777" ]] &>/dev/null; then
  WALLET_POS_REWARDS="Stakes ${Y1}$WALLET_POS_REWARDS${N0}"
  CB="${Y1}"
  TX="${Y1}"
  WC="${Y1}"
else
  # if any rewards but after the fact
  if [[ "$WALLET_POS_REWARDS" -gt "0" ]] &>/dev/null; then
    WALLET_POS_REWARDS="Stakes ${N0}$WALLET_POS_REWARDS${N0}"
  else
    WALLET_POS_REWARDS="Stakes ${GR}$WALLET_POS_REWARDS${N0}"
  fi
  CB="${GR}"
  TX="${GR}"
  WC="${N0}"
fi

################################################################################
# patriotnode status (masternode)
################################################################################

MASTER_STATUS=""

# if zero
if [[ -z "$MASTER_STATUS" ]] &>/dev/null; then
  MASTER_STATUS="${GR}M${N0}"
fi

################################################################################
# control status (control wallet)
################################################################################

# patriotnode count
CONTROL_STATUS="$(egrep -c "MN|PN" "$HOME_DIR"/.trumpcoin/patriotnode.conf 2>/dev/null)"

if [[ "$CONTROL_STATUS" -gt "1" ]] &>/dev/null; then
  CONTROL_STATUS="${CY}C${N0}"
fi

# if zero
if [[ "$CONTROL_STATUS" -eq "0" || -z "$CONTROL_STATUS" ]] &>/dev/null; then
  CONTROL_STATUS="${GR}C${N0}"
fi

################################################################################
# proof-of-stake status
################################################################################

POS_STATUS="$(grep -c "Staking Not Active" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null)"

# if zero
if [[ "$POS_STATUS" == "0" || -z "$POS_STATUS" ]] &>/dev/null; then
  POS_STATUS="${G1}S${N0}"
fi

# if active
if [[ "$POS_STATUS" == "1" ]] &>/dev/null; then
  POS_STATUS="${GR}S${N0}"
fi

################################################################################
# tor status (tor)
################################################################################

TOR_STATUS="$(grep "proxy" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $2 }' | tr -d '",' | egrep -c "[0-9]+|[A-Z]+|[a-z]")"

# if active
if [[ "$TOR_STATUS" == "1" ]] &>/dev/null; then
  TOR_STATUS="${P1}P${N0}"
fi

# if zero
if [[ -z "$TOR_STATUS" ]] &>/dev/null; then
  TOR_STATUS="${GR}P${N0}"
fi

################################################################################
# lan status (network interface)
################################################################################

echo "$(ifconfig 2>/dev/null)" >"$HOME_DIR"/node/ifconfig

LAN_STATUS="$(cat "$HOME_DIR"/node/ifconfig 2>/dev/null | head -1 | awk '{ print $1 }' | tr -d ':')"

# if zero
if [[ -z "$LAN_STATUS" ]] &>/dev/null; then
  LAN_STATUS="${GR}nul1${N0}"
else
  LAN_STATUS="${CY}${LAN_STATUS:0:4}${N0}"
fi

################################################################################
# system load
################################################################################

SYSTEM_LOAD="$(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"

################################################################################
# cpu temperatue
################################################################################

# read raw temp in millidegrees
CPU_CTEMP_RAW="$(awk NF /sys/devices/virtual/thermal/thermal_zone0/temp)"
# integer celsius
CPU_CTEMP_C="$((CPU_CTEMP_RAW / 1000))"
# integer fahrenheit (using integer math)
CPU_FTEMP=$(((CPU_CTEMP_C * 9 / 5) + 32))
# with symbol
CPU_CTEMP_C="${CPU_CTEMP_C}°C"
CPU_FTEMP="${CPU_FTEMP}°F"

################################################################################
# system memory
################################################################################

TOTAL_MEM="${G0}$(echo "$(echo "$(grep "MemTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }')+"$(grep "SwapTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }') | bc -l 2>/dev/null)/1024" | bc 2>/dev/null)${N0}"
FREE_MEM="${G1}$(echo "$(grep "MemFree" /proc/meminfo 2>/dev/null | awk '{ print $2 }')/1024" | bc 2>/dev/null)${N0}"

################################################################################
# hard drive
################################################################################

DF_TOTAL="$(df -h --total 2>/dev/null)"

TOTAL_HDD="${G0}$(echo "$DF_TOTAL" | tail -1 | xargs | tr -d '-' | awk '{ print $2 }')${N0}"
USED_HDD="${G1}$(echo "$DF_TOTAL" | tail -1 | xargs | tr -d '-' | awk '{ print $3 }')${N0}"
USED_HDD_P="$(echo "$DF_TOTAL" | tail -1 | xargs | tr -d '-' | awk '{ print $5 }' | tr -d 'G')"

################################################################################
# system user
################################################################################

SYSTEM_USER="$USER_NAME"

################################################################################
# ip address
################################################################################

IP_ADDRESS="$(cat "$HOME_DIR"/node/ifconfig 2>/dev/null | grep "inet" | egrep -v "prefix|127" | awk '{ print $2 }')"

# if zero
if [[ -z "$IP_ADDRESS" ]] &>/dev/null; then
  IP_ADDRESS="Disconnected"
fi

################################################################################
# download
################################################################################

# get all RX byte counts from ifconfig
DOWNLOAD_TOTAL_BYTES=$(cat "$HOME_DIR"/node/ifconfig 2>/dev/null | grep "RX packets" | awk '{ print $5 }' | paste -sd+ - | bc 2>/dev/null)
# convert RX bytes to MB and GB
DOWNLOAD="$(echo "scale=2; $DOWNLOAD_TOTAL_BYTES / (1024 * 1024 * 1024)" | bc 2>/dev/null | awk '{ printf "%.2f\n", $1 }')G"

################################################################################
# upload
################################################################################

# get all TX byte counts from ifconfig
UPLOAD_TOTAL_BYTES=$(cat "$HOME_DIR"/node/ifconfig 2>/dev/null | grep "TX packets" | awk '{ print $5 }' | paste -sd+ - | bc 2>/dev/null)
# convert RX bytes to MB and GB
UPLOAD="$(echo "scale=2; $UPLOAD_TOTAL_BYTES / (1024 * 1024 * 1024)" | bc 2>/dev/null | awk '{ printf "%.2f\n", $1 }')G"

################################################################################
# wallet daemon
################################################################################

WALLET_DAEMON="freedomcoind"

################################################################################
# wallet version
################################################################################

WALLET_VERSION="$(tail -1 "$HOME_DIR"/node/version.tmp 2>/dev/null | awk '{ print $NF }')"

# if zero
if [[ -z "$WALLET_VERSION" ]] &>/dev/null; then
  WALLET_VERSION="${GR}Missing!${N0}"
fi

################################################################################
# wallet chain
################################################################################

WALLET_CHAIN="$(grep -w "chain" "$HOME_DIR"/node/getblockchaininfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',"')"

# if main
if [[ "$WALLET_CHAIN" == "main" ]] &>/dev/null; then
  WALLET_CHAIN="${G1}mainnet${N0}"
fi

# if test
if [[ "$WALLET_CHAIN" == "test" ]] &>/dev/null; then
  WALLET_CHAIN="${CY}testnet${N0}"
fi

# if zero
if [[ -z "$WALLET_CHAIN" ]] &>/dev/null; then
  WALLET_CHAIN="${GR}nonet${N0}"
fi

################################################################################
# public ip address
################################################################################

# if missing
if [[ ! -f "$HOME_DIR"/node/wanip.tmp ]] &>/dev/null; then
  PUBLIC_IP="$(curl -s http://whatismyip.akamai.com/)"
  echo "$PUBLIC_IP" >"$HOME_DIR"/node/wanip.tmp
fi

# random start number
RANDOM_PUBLIC_IP=$((((RANDOM % 2) + 1)))

# onion ip address
if [[ "$RANDOM_PUBLIC_IP" == "1" ]] &>/dev/null; then
  PUBLIC_IP="$(awk NF "$HOME_DIR"/node/onionip.tmp 2>/dev/null)"
  PUBLIC_IP="${P1}${PUBLIC_IP:0:9}...onion${N0:?}"
fi
# wan ip address
if [[ "$RANDOM_PUBLIC_IP" == "2" ]] &>/dev/null; then
  PUBLIC_IP="${CY}$(awk NF "$HOME_DIR"/node/wanip.tmp 2>/dev/null):15110${N0}"
fi
# if zero
if [[ -z "$PUBLIC_IP" || ! -s "$HOME_DIR"/node/wanip.tmp ]] &>/dev/null; then
  PUBLIC_IP="${GR}Updating..${N0}"
fi

################################################################################
# wallet peers total
################################################################################

WALLET_PEERS_TOTAL="$(grep "connections" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_PEERS_TOTAL" ]] &>/dev/null; then
  WALLET_PEERS_TOTAL="0"
else
  WALLET_PEERS_TOTAL="${G1}$WALLET_PEERS_TOTAL${N0}"
fi

################################################################################
# wallet peers ip4 address
################################################################################

# ip4 address
WALLET_PEERS_IP4="$(grep "addrlocal" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | awk '{ print $NF }' | awk -F: '{ print $1 }' | tr -d ',"' | egrep -v "[a-z]+" | grep -oP '\b(?:\d{1,3}\.){3}\d{1,3}\b' | wc -l)"

# if zero
if [[ -z "$WALLET_PEERS_IP4" ]] &>/dev/null; then
  WALLET_PEERS_IP4="${GR}0${N0}"
else
  WALLET_PEERS_IP4="${G0}$WALLET_PEERS_IP4${N0}"
fi

################################################################################
# wallet peers ip6 address
################################################################################

# ip6 address
WALLET_PEERS_IP6="$(grep "addrlocal" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | awk '{ print $NF }' | awk -F: '{ print $1 }' | tr -d ',"' | grep -oP '\[?' | wc -l)"

# if zero
if [[ -z "$WALLET_PEERS_IP6" ]] &>/dev/null; then
  WALLET_PEERS_IP6="${GR}0${N0}"
else
  WALLET_PEERS_IP6="${P1}$WALLET_PEERS_IP6${N0}"
fi

################################################################################
# wallet balances
################################################################################

WALLET_BALANCES="$(grep "balance" "$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',' | awk '{ SUM += $1} END { print SUM }')"
WALLET_VALUE="$(echo "${WALLET_BALANCES}*${FREED_PRICE}" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"

# if zero
if [[ -z "$WALLET_VALUE" ]] &>/dev/null; then
  WALLET_VALUE="${GR}0${N0}"
else
  WALLET_VALUE="${G1}$WALLET_VALUE${N0}"
fi

if [[ "$(echo "$WALLET_BALANCES" | awk -F. '{ print $1 }')" -gt "0" ]] &>/dev/null; then
  WALLET_BALANCES="$(echo "$WALLET_BALANCES" | awk '{ printf "%.2f\n", $1 }')"
fi

# if zero
if [[ -z "$WALLET_BALANCES" || "$(echo "$WALLET_BALANCES" | tr -d '.' | sed 's/^0*//')" -eq "0" || "$WALLET_BALANCES" == "0.00000000" ]] &>/dev/null; then
  WALLET_BALANCES="${GR}0${N0}"
else
  WALLET_BALANCES="${WC}$WALLET_BALANCES${N0}"
fi

################################################################################
# wallet inputs
################################################################################

WALLET_INPUTS_NODES="$(grep -c "amount" "$HOME_DIR"/node/listunspent.tmp 2>/dev/null)"

# if zero
if [[ -z "$WALLET_INPUTS_NODES" || "$WALLET_INPUTS_NODES" == "0" ]] &>/dev/null; then
  WALLET_INPUTS_NODES="Inputs ${GR}0${N0}"
else
  WALLET_INPUTS_NODES="Inputs $WALLET_INPUTS_NODES"
fi

################################################################################
# wallet tx count
################################################################################

WALLET_TXCOUNT="$(grep "txcount" "$HOME_DIR"/node/getwalletinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_TXCOUNT" || "$WALLET_TXCOUNT" == "0" ]] &>/dev/null; then
  WALLET_TXCOUNT="${GR}0${N0}"
fi

################################################################################
# wallet mempool
################################################################################

WALLET_MEMPOOL="$(grep "size" "$HOME_DIR"/node/getmempoolinfo.tmp 2>/dev/null | awk '{ print $2 }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_MEMPOOL" || "$WALLET_MEMPOOL" == "0" ]] &>/dev/null; then
  WALLET_MEMPOOL="${GR}0${N0}"
else
  WALLET_MEMPOOL="$WALLET_MEMPOOL"
fi

################################################################################
# wallet heads
################################################################################

WALLET_HEADS="$(grep "blocks" "$HOME_DIR"/node/getinfo.tmp 2>/dev/null | awk '{ print $NF }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_HEADS" ]] &>/dev/null; then
  WALLET_HEADS="${GR}0${N0}"
fi

################################################################################
# wallet tx last
################################################################################

# if any wallet movements
if [[ "$WALLET_MOVEMENT" -gt "0" && "$WALLET_MOVEMENT_AGE" -lt "2777" ]] &>/dev/null; then
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/movements.tmp 2>/dev/null)${N0}"
fi

# if any proof-of-stake
if [[ "$WALLET_POS_REWARDS" -gt "0" && "$WALLET_POS_REWARDS_AGE" -lt "2777" ]] &>/dev/null; then
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/stakes.tmp 2>/dev/null)${N0}"
fi

# if still zero
if [[ -s "$HOME_DIR"/node/getbestblockhash.tmp || "$WALLET_POS_REWARDS_AGE" -gt "2777" && "$WALLET_MOVEMENT_AGE" -gt "2777" ]] &>/dev/null; then
  # get best block hash
  WALLET_TXLAST="$(tail -1 "$HOME_DIR"/node/getbestblockhash.tmp 2>/dev/null)${N0}"
fi

# if loading block index
if [[ "$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | grep "Loading block index...")" ]] &>/dev/null; then
  WALLET_TXLAST="   ${CY}Loading${N0}"
  CB="${CY}"
fi

################################################################################
# sync progress
################################################################################

# sync progress
SYNC_PROGRESS="$(grep -oP 'progress=\K[0-9.]+' .trumpcoin/debug.log 2>/dev/null | tail -1 | tr -d '.')"

# if any data
if [[ "$(grep -c "progress=" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" -gt "0" ]] &>/dev/null; then
  # if syncing
  if [[ ! "$(grep -oP 'progress=\K[0-9.]+' "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | tail -1 | egrep "[0-9]+.[0-9]+")" == "1.000000" ]] &>/dev/null; then
    # sync progress bar color based on percentage
    WALLET_TXLAST="   ${Y1}${SYNC_PROGRESS_BAR}${N0}"
  fi
fi

################################################################################

# if zero
if [[ -z "$WALLET_TXLAST" || "$(grep -c "progress=" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" -eq "0" ]] &>/dev/null; then
  WALLET_TXLAST="   ${GR}Loading${N0}"
  CB="${GR}"
fi

################################################################################
# quotes
################################################################################

source /etc/freedom-node/include/timeline

# if enough quotes
if [[ "$(wc -l "$HOME_DIR"/node/quotes 2>/dev/null | awk '{ print $1 }')" -gt "10" ]] &>/dev/null; then
  # random quote log start
  RANDOM_QUOTE_LOG=$((((RANDOM % 2) + 1)))
  if [[ "$RANDOM_QUOTE_LOG" == "1" ]] &>/dev/null; then
    LAST_LOG_QUOTE="1"
  else
    LAST_LOG_QUOTE="0"
  fi
fi

################################################################################
# last log
################################################################################

LAST_LOG="$(tail -1 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)"

# if enough quotes
if [[ "$LAST_LOG_QUOTE" == "1" ]] &>/dev/null; then
  # output random quotes
  LAST_LOG="$(sort -R "$HOME_DIR"/node/quotes 2>/dev/null | tail -1)"
  LAST_LOG="${N0}${LAST_LOG:0:171}${N0}"
else
  # output normal node log w size
  LOG_SIZE=$(ls -lSh "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }')
  LAST_LOG="${N0}${LAST_LOG:0:171} log=${LOG_SIZE}${N0}"
fi

# if zero
if [[ -z "$LAST_LOG" ]] &>/dev/null; then
  LAST_LOG="debug.log is empty.."
fi

# if more than n megabytes
if [[ "$(ls -lSh "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }' | tr -d 'M' | awk -F. '{ print $1 }')" -gt "1" ]] &>/dev/null; then
  # trim debug.log
  echo "$(tail -1001 "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null)" >"$HOME_DIR"/.trumpcoin/debug.log
fi

################################################################################
# connected peers list
################################################################################

# create ip4 list, disregard duplicates
grep "addrlocal" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | tr -d '",' | awk '{ print $2 }' | egrep "[0-9]+.[0-9]+.[0-9]+.[0-9]+" | egrep -v "[a-z]+" | awk -F: '{ print $1 }' | awk '!a[$0]++' >/etc/freedom-node/connected.peers
# include ip6, disregard duplicates
grep "addrlocal" "$HOME_DIR"/node/getpeerinfo.tmp 2>/dev/null | tr -d '",' | awk '{ print $2 }' | egrep ":|::" | egrep "[a-z]+" | awk -F] '{ print $1 }' | tr -d '[' | awk '!a[$0]++' >>/etc/freedom-node/connected.peers

################################################################################
# arp peers list
################################################################################

# remove after midnight
if [[ "$(echo "$SYSTEM_CLOCK" | awk -F: '{ print $1":"$2 }')" == "00:00" ]] &>/dev/null; then
  rm /etc/freedom-node/arp.peers &>/dev/null
fi

# if missing
if [[ ! -f /etc/freedom-node/arp.peers ]] &>/dev/null; then
  # create arp list
  cd /tmp || exit && sudo arp-scan "$(echo "$IP_ADDRESS" | egrep -o "[0-9]+.[0-9]+.[0-9]+").0"/24 >/etc/freedom-node/arp.peers
  # fetch ip address, disregard duplicates
  echo "$(awk NF /etc/freedom-node/arp.peers | egrep "[0-9]+.[0-9]+.[0-9]+.[0-9]+" | awk '!a[$0]++')" >/etc/freedom-node/arp.peers
  cd || exit
fi

################################################################################
# failed peers list
################################################################################

# failed, disregard duplicates
grep "failed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $5 }' | grep "15110" | awk -F:15110 '{ print $1 }' | awk '!a[$0]++' >/etc/freedom-node/failed.peers
# failed after select() (111), disregard duplicates
grep "failed" "$HOME_DIR"/.trumpcoin/debug.log 2>/dev/null | awk '{ print $4 }' | grep "15110" | grep -v "to" | awk -F:15110 '{ print $1 }' | awk '!a[$0]++' >>/etc/freedom-node/failed.peers

################################################################################
# addnode onetry
################################################################################

# if found
if [[ -f /etc/freedom-node/node.peers && -f /etc/freedom-node/connected.peers && -f /etc/freedom-node/arp.peers && -f "$HOME_DIR"/.trumpcoin/debug.log ]] &>/dev/null; then

  # sort lists
  echo "$(awk NF /etc/freedom-node/node.peers 2>/dev/null | sort | awk '!a[$0]++')" >/etc/freedom-node/node.peers
  echo "$(awk NF /etc/freedom-node/connected.peers 2>/dev/null | sort | awk '!a[$0]++')" >/etc/freedom-node/connected.peers
  echo "$(awk NF /etc/freedom-node/arp.peers 2>/dev/null | sort | awk '!a[$0]++')" >/etc/freedom-node/arp.peers
  echo "$(awk NF /etc/freedom-node/failed.peers 2>/dev/null | sort | awk '!a[$0]++')" >/etc/freedom-node/failed.peers

  # ip address node
  IP_ADDRESS_NODES="$(awk NF /etc/freedom-node/node.peers 2>/dev/null)"
  # ip address connected
  IP_ADDRESS_CONNECTED="$(awk NF /etc/freedom-node/connected.peers 2>/dev/null)"
  # ip address arp
  IP_ADDRESS_ARP="$(awk NF /etc/freedom-node/arp.peers 2>/dev/null | awk '{ print $1 }' | egrep -v "[a-z]+")"
  # ip address failed
  IP_ADDRESS_FAILED="$(awk NF /etc/freedom-node/failed.peers 2>/dev/null)"

  # combine nodes and arp peers list, disregard duplicates
  echo "$IP_ADDRESS_NODES
$IP_ADDRESS_ARP" | awk '!a[$0]++' | sort | awk NF >/etc/freedom-node/addnode

  # fetch address to add, disregard duplicates
  IP_ADDRESS_ADDNODE="$(awk NF /etc/freedom-node/addnode 2>/dev/null)"

  # if any data
  if [[ "$(echo "$IP_ADDRESS_FAILED" | egrep -c "[0-9]+|[a-z]+")" -gt "0" ]] &>/dev/null; then
    # disregard already connected peers, disregard failed peers, create addnode
    echo "$(echo "$IP_ADDRESS_ADDNODE" | grep -v "$IP_ADDRESS_CONNECTED" | grep -v "$IP_ADDRESS_FAILED")" >/etc/freedom-node/addnode
  else
    # disregard already connected peers, create addnode
    echo "$(echo "$IP_ADDRESS_ADDNODE" | grep -v "$IP_ADDRESS_CONNECTED")" >/etc/freedom-node/addnode
  fi

  # fetch random address to add, disregard uplicates
  IP_ADDRESS_ADDNODE="$(awk NF /etc/freedom-node/addnode 2>/dev/null | sort -R | tail -1)"
  # onetry age (seconds)
  IP_ONETRY_AGE="$(($(echo "$DATE") - $(stat -c '%Y'"$HOME_DIR"/node/onetry.tmp 2>/dev/null || echo 0)))"

  # if missing, if older than n
  if [[ ! -f "$HOME_DIR"/node/onetry.tmp || "$IP_ONETRY_AGE" -gt "180" ]] &>/dev/null; then
    # if any numbers
    if [[ "$(echo "$IP_ADDRESS_ADDNODE" | egrep -c "[0-9]+|[a-z]+")" -eq "1" ]] &>/dev/null; then
      # addnode onetry
      /usr/local/bin/freedomcoin-cli addnode "$IP_ADDRESS_ADDNODE" onetry 2>/dev/null | grep -v "Error" &
      echo "addnode $IP_ADDRESS_ADDNODE onetry" >"$HOME_DIR"/node/onetry.tmp
    fi
  fi
fi

################################################################################

# reset after midnight
if [[ "$(echo "$SYSTEM_CLOCK" | awk -F: '{ print $1":"$2 }')" == "00:00" ]] &>/dev/null; then
  truncate -s 0 "$HOME_DIR"/.trumpcoin/debug.log &>/dev/null
fi

# END
