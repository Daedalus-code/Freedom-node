#!/bin/bash

################################################################################

source /etc/freedom-node/include/color

################################################################################

# start counting (seconds)
START="$SECONDS"

################################################################################
# memory Check
################################################################################

MEM_FOUND="$(cat /tmp/mem.tmp 2>/dev/null)"

if [[ -n "$MEM_FOUND" ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: $MEM_FOUND\n"
  # check if enough memory
  if [[ "$(echo "$MEM_FOUND" | awk '{ print $1 }')" -lt "4000" ]] &>/dev/null; then
    printf '%b' "[${GR}!!${N0}] :: Not enough memory!\n" && sleep 1
    printf '%b' "[${GR}!!${N0}] :: Creating 3G Swap..\n"
    sudo swapoff /swapfile &>/dev/null
    sudo fallocate -l 3G /swapfile
    sudo chmod 600 /swapfile
    printf '%b' "[${GR}!!${N0}] :: $(sudo mkswap /swapfile).\n"
    sudo swapon /swapfile
  fi
else
  printf '%b' "[${GR}!!${N0}] :: Error\n" && exit
fi

################################################################################
# home directory and user setup
################################################################################

HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null)"
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null)"

################################################################################
# cpu architecture and cores
################################################################################

CPU_ARCH="$(uname -m)"
CPU_CORES="$(nproc)"

################################################################################
# set Host and toolchain packages based on cpu architecture
################################################################################

if [[ "$CPU_ARCH" == "aarch64" ]]; then
  HOST="aarch64-linux-gnu"
  TOOLCHAIN_PKGS="gcc-aarch64-linux-gnu g++-aarch64-linux-gnu"
elif [[ "$CPU_ARCH" == "armv7l" ]]; then
  HOST="arm-linux-gnueabihf"
  TOOLCHAIN_PKGS="gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf"
elif [[ "$CPU_ARCH" == "x86_64" ]]; then
  HOST="x86_64-linux-gnu"
  TOOLCHAIN_PKGS="gcc g++"
else
  printf '%b' "[${R1}!!${N0}] :: Unsupported architecture. Exiting.\n"
  exit 1
fi

printf '%b' "[${G1}OK${N0}] :: Detected ${CY}$CPU_ARCH${N0} with ${P1}$CPU_CORES${N0} cores. Using target: ${CY}$HOST${N0}\n"

################################################################################
# install dependencies as per FreedomCoin guidelines
################################################################################

sudo apt-get install -y \
  build-essential libtool autotools-dev automake pkg-config bsdmainutils curl \
  git python3 libssl-dev libevent-dev libboost-system-dev libboost-filesystem-dev \
  libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev \
  protobuf-compiler libqrencode-dev libdb-dev libdb++-dev libsqlite3-dev \
  $TOOLCHAIN_PKGS g++ libsodium-dev libgmp-dev libboost-all-dev

if [[ ! -f /tmp/upd.tmp ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: Installing dependencies...\n"
  echo "updated $(date | xargs)" >/tmp/upd.tmp
  sudo apt-get update
  sudo apt-get upgrade -y
fi

sudo apt-get autoremove -y

################################################################################
# rust and cargo installation
################################################################################

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source "$HOME_DIR/.cargo/env"

################################################################################
# clone FreedomCoin Core if missing
################################################################################

if [[ ! -d "$HOME_DIR/FreedomCoin-Core" ]] &>/dev/null; then
  cd "$HOME_DIR" || exit
  git clone "https://github.com/FreedomCoin-Project/FreedomCoin-Core.git"
fi

# set user ownership
sudo chown -R "${USER_NAME:?}":"${USER_NAME:?}" "$HOME_DIR/FreedomCoin-Core/"

################################################################################
# build dependencies without Qt
################################################################################

# of more than 1 core
if [[ "$CPU_CORES" -gt "1" ]] &>/dev/null; then
  # disregard 1 core
  CPU_CORES_MAKE="$(echo "${CPU_CORES}-1" | bc 2>/dev/null)"
fi

cd "$HOME_DIR/FreedomCoin-Core/depends" || exit
make HOST=$HOST NO_QT=1 -j"$CPU_CORES_MAKE"

################################################################################
# configure the build using the recommended flags
################################################################################

cd "$HOME_DIR/FreedomCoin-Core" || exit
export BDB_PREFIX="$HOME_DIR/db4"

# use configure script from the official guide
./configure --prefix=$PWD/depends/$HOST \
  --enable-glibc-back-compat \
  --enable-reduce-exports \
  --disable-tests \
  --disable-bench \
  --without-gui \
  --without-miniupnpc \
  --without-qt \
  --without-zmq \
  LDFLAGS="-L${BDB_PREFIX}/lib" \
  CPPFLAGS="-I${BDB_PREFIX}/include"

################################################################################
# build FreedomCoin binaries (daemon and client)
################################################################################

# of more than 1 core
if [[ "$CPU_CORES" -gt "1" ]] &>/dev/null; then
  # disregard 1 core
  CPU_CORES_MAKE="$(echo "${CPU_CORES}-1" | bc 2>/dev/null)"
fi

make -C src freedomcoind freedomcoin-cli -j"$CPU_CORES_MAKE"

################################################################################
# strip binaries to save space
################################################################################

if [[ -f "$HOME_DIR"/FreedomCoin-Core/src/freedomcoind && -f "$HOME_DIR"/FreedomCoin-Core/src/freedomcoin-cli ]] &>/dev/null; then
  printf '%b' "[${GR}!!${N0}] :: Stripping daemon and client..\n"
  strip "$HOME_DIR"/FreedomCoin-Core/src/freedomcoind "$HOME_DIR"/FreedomCoin-Core/src/freedomcoin-cli || true
fi

################################################################################
# move binaries to home directory
################################################################################

if [[ -f "$HOME_DIR"/FreedomCoin-Core/src/freedomcoind && -f "$HOME_DIR"/FreedomCoin-Core/src/freedomcoin-cli ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] :: Moving binaries to $HOME_DIR..\n"
  cp "$HOME_DIR"/FreedomCoin-Core/src/freedomcoind "$HOME_DIR" &>/dev/null
  cp "$HOME_DIR"/FreedomCoin-Core/src/freedomcoin-cli "$HOME_DIR" &>/dev/null
fi

################################################################################
# install to /usr/local/bin (optional)
################################################################################

if [[ -f "$HOME_DIR/freedomcoind" && -f "$HOME_DIR/freedomcoin-cli" ]] &>/dev/null; then
  printf '%b' "[${GR}!!${N0}] :: Installing daemon and client..\n"
  sudo cp "$HOME_DIR"/freedomcoind /usr/local/bin/
  sudo cp "$HOME_DIR"/freedomcoin-cli /usr/local/bin/
else
  echo "[??] Build did not finish.."
  EXIT_THIS="1"
fi

################################################################################
# calculate and display build time
################################################################################

DURATION=$(echo "$SECONDS-$START" | bc 2>/dev/null)
TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))

echo
printf '%b' "[${G1}OK${N0}] :: Build time: ${G1}$TIMER${N0}\n"

echo
read -r -p "[Ok] :: Press Enter to continue" </dev/tty
echo

# If exit
if [[ "$EXIT_THIS" == "1" ]] &>/dev/null; then
  exit
fi

# END
