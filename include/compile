#!/bin/bash

################################################################################
# load colors if available
################################################################################

if [[ -f /etc/freedom-node/include/color ]]; then
  source /etc/freedom-node/include/color
else
  G1=""
  N0=""
fi

################################################################################
# set home and user
################################################################################

HOME_DIR="$(cat /etc/freedom-node/homedir 2>/dev/null || echo "$HOME")"
USER_NAME="$(cat /etc/freedom-node/user 2>/dev/null || echo "$USER")"

################################################################################
# cpu architecture & system setup
################################################################################

ARCH=$(uname -m)
CORES=$(nproc)

# update and install dependencies
sudo apt install -y \
  build-essential libtool autotools-dev automake pkg-config \
  bsdmainutils curl git libevent-dev libssl-dev \
  libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
  libboost-test-dev libboost-thread-dev libzmq3-dev libqrencode-dev \
  libminiupnpc-dev software-properties-common \
  libgmp-dev python3

################################################################################
# Berkeley DB 4.8 Build
################################################################################

cd "$HOME_DIR" || exit

if [[ ! -f db-4.8.30.NC.tar.gz ]] || [[ ! -d db-4.8.30.NC ]]; then
  wget http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz
  tar -xzf db-4.8.30.NC.tar.gz
fi

# patch ancient config scripts for ARM/aarch64 support
cd "$HOME_DIR/db-4.8.30.NC/build_unix" || exit
cp /usr/share/misc/config.* ../dist/ 2>/dev/null || {
  wget -qO ../dist/config.guess https://git.savannah.gnu.org/gitweb/?p=config.git
  a=blob_plain
  f=config.guess
  wget -qO ../dist/config.sub https://git.savannah.gnu.org/gitweb/?p=config.git
  a=blob_plain
  f=config.sub
  chmod +x ../dist/config.*
}
../dist/configure --prefix=/usr/local --enable-cxx
make -j"$CORES"
sudo make install
cd "$HOME_DIR" || exit

################################################################################
# clone and build FreedomCoin
################################################################################

if [[ ! -d FreedomCoin-Core ]]; then
  git clone https://github.com/FreedomCoin-Project/FreedomCoin-Core.git
fi

cd FreedomCoin-Core || exit
git fetch --tags
TAG="$(git describe --tags "$(git rev-list --tags --max-count=1)")"
git checkout "$TAG"

./autogen.sh

CONFIG_OPTS=(
  "--with-incompatible-bdb"
  "--disable-tests"
  "--disable-bench"
  "--with-gui=no"
  "BDB_LIBS=-L/usr/local/lib -ldb_cxx-4.8"
  "BDB_CFLAGS=-I/usr/local/include"
)

if [[ "$ARCH" == "aarch64" ]]; then
  CONFIG_OPTS+=("--host=aarch64-linux-gnu")
elif [[ "$ARCH" == "armv7l" ]]; then
  CONFIG_OPTS+=("--host=arm-linux-gnueabihf")
fi

./configure "${CONFIG_OPTS[@]}"
make -j"$CORES"

################################################################################
# post-Build Actions
################################################################################

DURATION=$((SECONDS - START))
TIMER=$(printf '%dh:%dm:%ds\n' $((DURATION / 3600)) $((DURATION % 3600 / 60)) $((DURATION % 60)))

if [[ -f src/freedomcoind && -f src/freedomcoin-cli ]]; then
  strip src/freedomcoind src/freedomcoin-cli || true
  echo -e "[${G1}OK${N0}] Console : Installing daemon and cli.."
  sudo cp src/freedomcoind /usr/local/bin/
  sudo cp src/freedomcoin-cli /usr/local/bin/
fi

################################################################################
# done
################################################################################

echo
echo -e "[${N0}!!${N0}] Console : Build time: ${G1}$TIMER${N0}"
echo
read -r -p "[Ok] Press Enter to continue" </dev/tty
echo

# END
